version: '3.5'

services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2022-03-17T06-34-49Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.1.4
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"

  frontend_api:
    container_name: semantic-fs-server
    # Here we tell docker compose how to build the container.
    build:
      # The "build context" is everything that docker should have access to when building your image. We make it the root directory of our project
      context: .
      
      dockerfile: server.dockerfile
    tty: true
    # Here we handle the networking between our host machine and the docker container. This means if you access localhost:8888 in a browser on your computer, you will be directed to port 8888 in your container
    ports:
      - "127.0.0.1:8000:8000"
    # A volume is essentially a mounted drive for a docker container. This tells Docker to map the contents of your fronted_api directory locally with the /app directory in your container.
    # This is a nice quality of life thing when developing, since Flask has an auto-reload feature. If you edit files locally, they will change in your container too and your server will restart without needing to restart docker
    volumes:
      - .:/app

networks:
  default:
    name: milvus
